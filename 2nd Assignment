Question-01=WAP to find the duplicates present in an array.

public class DuplicateKhojo {

	public static void main(String[] args) {
		
		  int [] arr = new int [] {1, 2, 3, 4, 2, 7, 8, 8, 3};  
	        System.out.println("Duplicate elements in given array: ");  
	        //Searches for duplicate element  
	        for(int i = 0; i < arr.length; i++) {  
	            for(int j = i + 1; j < arr.length; j++) {  
	                if(arr[i] == arr[j])  
	                    System.out.println(arr[j]);  
	            }  
	        }  

	}

}

Question -02. WAP to sort an array using Quick Sort Algorithm.

public class QuickSort {
    public static void quickSort(int[] arr) {
        quickSort(arr, 0, arr.length - 1);
    }

    private static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);

            // Recursively sort the two partitions
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }


    private static int partition(int[] arr, int low, int high) {
        // Choose the rightmost element as the pivot
        int pivot = arr[high];
        int i = low - 1;

        // Partition the array into two halves
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                swap(arr, i, j);
            }
        }

        // Place the pivot element at its correct position
        swap(arr, i + 1, high);

        return i + 1;
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int[] array = {9, 5, 1, 8, 2, 7, 3};
        System.out.println("Original Array: " + Arrays.toString(array));

        quickSort(array);
        System.out.println("Sorted Array: " + Arrays.toString(array));
    }
}


Question-03= WAP to sort an array using Bubble Sort Algorithm.

public class BubbleSort {

	public static void main(String[] args) {
		
		int[] ar= {10,20,30,40,50,60,70,80,90};
		
		Scanner scan=new Scanner(System.in);
		
		System.out.println("Enter the key to be searched");
		
		int key=scan.nextInt();
		int low=0;
		int high=ar.length-1;
		
		while(low<=high)
		{
			int mid=(low + high)/2;
			if(key==ar[mid])
			{
				System.out.println("Key "+key+ " Found at index "+ mid);
				break;
			}	
			else if(key <ar[mid])
			{
				high=mid-1;
			}
			else if(key >ar[mid])
			{
				low=mid+1;
			}
		}
		if(low>high)
		{
			System.out.println("Key not found");
		}

	}

}



Question -04= WAP to sort an array using Merge Sort Algorithm.

public class MergeSort {
    public static void mergeSort(int[] arr) {
        mergeSort(arr, 0, arr.length - 1);
    }

    private static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;

            // Sort the left and right halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    private static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Create temporary arrays
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        // Copy data to temporary arrays
        for (int i = 0; i < n1; i++) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArr[j] = arr[mid + 1 + j];
        }

        // Merge the temporary arrays
        int i = 0, j = 0;
        int k = left;

        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        // Copy the remaining elements of leftArr[], if any
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        // Copy the remaining elements of rightArr[], if any
        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        int[] array = {9, 5, 1, 8, 2, 7, 3};
        System.out.println("Original Array: " + Arrays.toString(array));

        mergeSort(array);
        System.out.println("Sorted Array: " + Arrays.toString(array));
    }
}




Question-05= WAP to sort an array using Selection Sort Algorithm.

public class SelectionSort {
    public static void selectionSort(int[] arr) {
        int n = arr.length;

        // One by one move the boundary of the unsorted subarray
        for (int i = 0; i < n - 1; i++) {
            // Find the minimum element in the unsorted array
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }

            // Swap the found minimum element with the first element
            swap(arr, i, minIndex);
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int[] array = {9, 5, 1, 8, 2, 7, 3};
        System.out.println("Original Array: " + Arrays.toString(array));

        selectionSort(array);
        System.out.println("Sorted Array: " + Arrays.toString(array));
    }
}


Question-06= WAP to check whether an array is a subset of another array.

public class ArraySubsetChecker {
    public static boolean isSubset(int[] arr1, int[] arr2) {
        Set<Integer> set = new HashSet<>();

        
        for (int num : arr1) {
            set.add(num);
        }

       
        for (int num : arr2) {
            if (!set.contains(num)) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        int[] array1 = {1, 2, 3, 4, 5};
        int[] array2 = {2, 4, 5};
        int[] array3 = {6, 7, 8};

        System.out.println("Array 2 is a subset of Array 1: " + isSubset(array1, array2));
        System.out.println("Array 3 is a subset of Array 1: " + isSubset(array1, array3));
    }
}








